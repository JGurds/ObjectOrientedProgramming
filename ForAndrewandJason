#  File: Geometry.py

#  Description:

#  Student Name: Jack Rickman

#  Student UT EID: jhr2368

#  Partner Name: Jackson Gurdak

#  Partner UT EID:

#  Course Name: CS 313E

#  Unique Number:

#  Date Created:

#  Date Last Modified:

import math
import sys

class Point (object):
    # constructor with default values
    def __init__ (self, x = 0, y = 0, z = 0):
        self.x = x
        self.y = y
        self.z = z


    # create a string representation of a Point
    # returns a string of the form (x, y, z)
    def __str__ (self):
        return '(' + str(self.x) + ', ' + str(self.y) + ', ' \
               + str(self.z) + ')'

    # get distance to another Point object
    # other is a Point object
    # returns the distance as a floating point number
    def distance (self, other):
        return  math.hypot(self.x - other.x, self.y - other.y, self.z - other.z)

    # test for equality between two points
    # other is a Point object
    # returns a Boolean
    def __eq__ (self, other):
        return (self.x == other.x) and (self.y == other.y) and (self.z == other.z)

class Sphere (object):
    # constructor with default values
    def __init__ (self, x = 0, y = 0, z = 0, radius = 1):
        self.x = x
        self.y = y
        self.z = z
        self.radius = radius
        self.center = Point(x, y, z)

    # returns string representation of a Sphere of the form:
    # Center: (x, y, z), Radius: value
    def __str__ (self):
        return 'Center: (' + str(self.x) + ', ' + str(self.y) + ', ' \
               + str(self.z) + '), Radius: ' + str(self.radius)

    # compute surface area of Sphere
    # returns a floating point number
    def area (self):
        return 4 * math.pi * float(self.radius) ** 2

    # compute volume of a Sphere
    # returns a floating point number
    def volume (self):
        return 4 / 3 * math.pi * float(self.radius) ** 3

    # determines if a Point is strictly inside the Sphere
    # p is Point object
    # returns a Boolean
    def is_inside_point (self, p):
        return self.center.distance(p) < self.radius

    # determine if another Sphere is strictly inside this Sphere
    # other is a Sphere object
    # returns a Boolean
    def is_inside_sphere (self, other):
        distance = (self.center.distance(other.center)) - (self.radius + other.radius)
        if distance <= 0:
          return False
        else:
          return False

    # determine if a Cube is strictly inside this Sphere
    # determine if the eight corners of the Cube are strictly
    # inside the Sphere
    # a_cube is a Cube object
    # returns a Boolean
    def is_inside_cube (self, a_cube):
      for i in range(8):
          if a_cube.edges[i].distance(self.center) > self.radius:
              return False
      return True

    # determine if a Cylinder is strictly inside this Sphere
    # a_cyl is a Cylinder object
    # returns a Boolean
    def is_inside_cyl (self, a_cyl):
        pass

    # determine if another Sphere intersects this Sphere
    # other is a Sphere object
    # two spheres intersect if they are not strictly inside
    # or not strictly outside each other
    # returns a Boolean
    def does_intersect_sphere (self, other):
        pass

    # determine if a Cube intersects this Sphere
    # the Cube and Sphere intersect if they are not
    # strictly inside or not strictly outside the other
    # a_cube is a Cube object
    # returns a Boolean
    def does_intersect_cube (self, a_cube):
        pass

    # return the largest Cube object that is circumscribed
    # by this Sphere
    # all eight corners of the Cube are on the Sphere
    # returns a Cube object
    def circumscribe_cube (self):
        cube = Cube()
        cube.side = math.sqrt(2 * self.radius ** 2)
        cube.center = self.center
        for i in range(8):
            if self.center.distance(cube.edges[i]) > self.radius:
                return None
        return cube



class Cube (object):
    # Cube is defined by its center (which is a Point object)
    # and side. The faces of the Cube are parallel to x-y, y-z,
    # and x-z planes.
    def __init__ (self, x = 0, y = 0, z = 0, side = 1):
        self.x = x
        self.y = y
        self.z = z
        self.side = side
        self.center = Point(x, y, z)
        self.edges = [Point(x, y, z), Point(x, y, z), Point(x, y, z),
                      Point(x, y, z), Point(x, y, z), Point(x, y, z),
                      Point(x, y, z), Point(x, y, z), Point(x, y, z),
                      Point(x, y, z), Point(x, y, z)]

    # string representation of a Cube of the form:
    # Center: (x, y, z), Side: value
    def __str__ (self):
        return 'Center: (' + str(self.x) + ', ' + str(self.y) + ', ' \
               + str(self.z) + '), Side: ' + str(self.side)

    def edges(self):
        edges_list = []
        operation1 = -1
        operation2 = -1
        operation3 = -1
        edge_operation = self.side / 2
        for i in range(2):
            operation1 *= -1
            for j in range(2):
                operation2 *= -1
                for k in range(2):
                    operation3 *= -1
                    edges_list.append()
        print(edges_list)


    # compute the total surface area of Cube (all 6 sides)
    # returns a floating point number
    def area (self):
        return 6 * self.side ** 2

    # compute volume of a Cube
    # returns a floating point number
    def volume (self):
        return  self.side ** 3

    # determines if a Point is strictly inside this Cube
    # p is a point object
    # returns a Boolean
    def is_inside_point (self, p):
        if self.center.distance(p) < (self.side / 2):
          return True
        return False

    # determine if a Sphere is strictly inside this Cube
    # a_sphere is a Sphere object
    # returns a Boolean
    def is_inside_sphere (self, a_sphere):
        for i in range(8):
          if self.center.distance(a_sphere.center) + a_sphere.radius \
                  >= self.edges[i].distance(self.center):
              return False
        return True


    # determine if another Cube is strictly inside this Cube
    # other is a Cube object
    # returns a Boolean
    def is_inside_cube (self, other):
        for i in range(8):
            self_dist = self.center.distance(self.edges[i])
            other_distance = other.edges[i].distance(self.center)
            if other_distance > self_dist:
                return False
        return True

    # determine if a Cylinder is strictly inside this Cube
    # a_cyl is a Cylinder object
    # returns a Boolean
    def is_inside_cylinder (self, a_cyl):
        pass

    # determine if another Cube intersects this Cube
    # two Cube objects intersect if they are not strictly
    # inside and not strictly outside each other
    # other is a Cube object
    # returns a Boolean
    def does_intersect_cube (self, other):
        for i in range(8):
            self_dist = self.center.distance(self.edges[i])
            other_distance = other.edges[i].distance(self.center)
            if other_distance < self_dist:
                return True
        return False

    # determine the volume of intersection if this Cube
    # intersects with another Cube
    # other is a Cube object
    # returns a floating point number
    def intersection_volume (self, other):
        pass

    # return the largest Sphere object that is inscribed
    # by this Cube
    # Sphere object is inside the Cube and the faces of the
    # Cube are tangential planes of the Sphere
    # returns a Sphere object
    def inscribe_sphere (self):
        pass

class Cylinder (object):
    # Cylinder is defined by its center (which is a Point object),
    # radius and height. The main axis of the Cylinder is along the
    # z-axis and height is measured along this axis
    def __init__ (self, x = 0, y = 0, z = 0, radius = 1, height = 1):
        self.x = x
        self.y = y
        self.z = z
        self.radius = radius
        self.height = height

    # returns a string representation of a Cylinder of the form:
    # Center: (x, y, z), Radius: value, Height: value
    def __str__ (self):
      return 'Center: (' + str(self.x) + ', ' + str(self.y) + ', ' \
             + str(self.z) + '), Radius: ' + str(self.side) + ', Height: '\
             + str(self.height)


    # compute surface area of Cylinder
    # returns a floating point number
    def area (self):
        return 2 * math.pi * self.radius * self.height + 2 * math.pi * self.radius ** 2

    # compute volume of a Cylinder
    # returns a floating point number
    def volume (self):
      return self.height * math.pi * self.radius ** 2

    # determine if a Point is strictly inside this Cylinder
    # p is a Point object
    # returns a Boolean
    def is_inside_point (self, p):
        pass

    # determine if a Sphere is strictly inside this Cylinder
    # a_sphere is a Sphere object
    # returns a Boolean
    def is_inside_sphere (self, a_sphere):
        pass

    # determine if a Cube is strictly inside this Cylinder
    # determine if all eight corners of the Cube are inside
    # a_cube is a Cube object
    # returns a Boolean
    def is_inside_cube (self, a_cube):
        pass

    # determine if another Cylinder is strictly inside this Cylinder
    # other is Cylinder object
    # returns a Boolean
    def is_inside_cylinder (self, other):
        pass

    # determine if another Cylinder intersects this Cylinder
    # two Cylinder object intersect if they are not strictly
    # inside and not strictly outside each other
    # other is a Cylinder object
    # returns a Boolean
    def does_intersect_cylinder (self, other):
        pass

def main():
    # read data from standard input
    file = sys.stdin.readlines()
    clean_file = []
    for i in range(len(file)):
        clean_file.append(file[i].split('#', 1)[0].strip())
    # read the coordinates of the first Point p and create a Point object
    p = Point(clean_file[0])
    # read the coordinates of the second Point q and create Point object
    q = Point(clean_file[1])
    # read the coordinates of the center and radius of sphereA
    sphereA = Sphere(clean_file[2])
    # read the coordinates of the center and radius of sphereB
    sphereB = Sphere(clean_file[3])
    # read the coordinates of the center and side of cubeA
    # create a Cube object
    cubeA =Cube(clean_file[4])

    # read the coordinates of the center and side of cubeB
    # create a Cube object
    cubeB = Cube(clean_file[5])
    # read the coordinates of the center, radius and height of cylA
    # create a Cylinder object
    cylA = Cylinder(clean_file[6])
    # read the coordinates of the center, radius and height of cylB
    # create a Cylinder object
    cylB = Cylinder(clean_file[7])
    # print if the distance of p from the origin is greater
    # than the distance of q from the origin
    orgin = Point()
    if orgin.distance(p) > orgin.distance(q):
        t_f = 'is'
    else:
        t_f = 'is not'
    print('Distance of Point p from the origin {} greater than the distance of Point q from the origin'.format(t_f))


    # print if Point p is inside sphereA

    # print if sphereB is inside sphereA

    # print if cubeA is inside sphereA

    # print if cylA is inside sphereA

    # print if sphereA intersects with sphereB

    # print if cubeB intersects with sphereB

    # print if the volume of the largest Cube that is circumscribed
    # by sphereA is greater than the volume of cylA


    # print if Point p is inside cubeA

    # print if sphereA is inside cubeA

    # print if cubeB is inside cubeA

    # print if cylA is inside cubeA

    # print if cubeA intersects with cubeB

    # print if the intersection volume of cubeA and cubeB
    # is greater than the volume of sphereA

    # print if the surface area of the largest Sphere object inscribed
    # by cubeA is greater than the surface area of cylA


    # print if Point p is inside cylA

    # print if sphereA is inside cylA

    # print if cubeA is inside cylA

    # print if cylB is inside cylA

    # print if cylB intersects with cylA

if __name__ == "__main__":
    main()
